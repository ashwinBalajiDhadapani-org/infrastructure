AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225 VPC SPIN Script Files
Parameters:
  VpcCidrBlock:
    Description: CIDR block
    Type: String
    Default: 10.0.0.0/26
  SubnetReOne:
    Description: Subnet Region 1
    Type: String
  SubnetReTwo:
    Description: Subnet Region 2
    Type: String
  SubnetReThree:
    Description: Subnet Region 3
    Type: String
  SubnetPrivateReOne:
    Description: Subnet Private Region 1
    Type: String
  SubnetPrivateReTwo:
    Description: Subnet Private Region 2
    Type: String
  SubnetPrivateReThree:
    Description: Subnet Private Region 3
    Type: String
  SubnetReOneName:
    Description: Subnet Region 1 Name
    Type: String
  SubnetReTwoName:
    Description: Subnet Region 2 Name
    Type: String
  SubnetReThreeName:
    Description: Subnet Region 3 Name
    Type: String
  SubnetPrivateReOneName:
    Description: Subnet Private Region 1 Name
    Type: String
  SubnetPrivateReTwoName:
    Description: Subnet Private Region 2 Name
    Type: String
  SubnetPrivateReThreeName:
    Description: Subnet Private Region 3 Name
    Type: String
  SubnetReOneCIDR:
    Description: Subnet Region 1 Cidr value
    Type: String
  SubnetReTwoCIDR:
    Description: Subnet Region 2 Cidr value
    Type: String
  SubnetReThreeCIDR:
    Description: Subnet Region 3 Cidr value
    Type: String
  SubnetPrivateReOneCIDR:
    Description: Subnet Private Region 1 Cidr value
    Type: String
  SubnetPrivateReTwoCIDR:
    Description: Subnet Private Region 2 Cidr value
    Type: String
  SubnetPrivateReThreeCIDR:
    Description: Subnet Private Region 3 Cidr value
    Type: String
  AMI:
    Description: "AMI for Instance"
    Type: String
  KeyName:
    Description: "Key Name for Instance"
    Type: String
  ProfileName:
    Default: dev
    Type: String
    Description: Profile to run 
  DBInstanceIdentifier:
    Description: "Instance identifier of db"
    Type: String
  DbUserName:
    Description: "User name of db"
    Type: String
  DbPassword:
    Description: "Password of db"
    Type: String
  DbPort:
    Description: "Port of db"
    Type: String
  DbName:
    Description: "Name of db"
    Type: String
  S3BucketName:
    Description: "Name of S3 bucket"
    Type: String
  S3BucketRegion:
    Description: "Region of S3 bucket"
    Type: String
  AwsAccessKey:
    Description: "AWS access Key"
    Type: String
  AwsSecretKey:
    Description: "AWS secret key"
    Type: String

Resources:
  myVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [0,!GetAZs '']
      CidrBlock: !Ref SubnetReOneCIDR
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: myVPC
      Tags:
        - Key: Name
          Value: !Ref SubnetReOneName
  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1,!GetAZs '']
      CidrBlock: !Ref SubnetReTwoCIDR
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: myVPC
      Tags:
        - Key: Name
          Value: !Ref SubnetReTwoName
  mySubnet3:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [2,!GetAZs '']
      CidrBlock: !Ref SubnetReThreeCIDR
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: myVPC
      Tags:
        - Key: Name
          Value: !Ref SubnetReThreeName
  myPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [0,!GetAZs '']
      CidrBlock: !Ref SubnetPrivateReOneCIDR
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: myVPC
      Tags:
        - Key: Name
          Value: !Ref SubnetPrivateReOneName
  myPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1,!GetAZs '']
      CidrBlock: !Ref SubnetPrivateReTwoCIDR
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: myVPC
      Tags:
        - Key: Name
          Value: !Ref SubnetPrivateReTwoName
  myPrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [2,!GetAZs '']
      CidrBlock: !Ref SubnetPrivateReThreeCIDR
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: myVPC
      Tags:
        - Key: Name
          Value: !Ref SubnetPrivateReThreeName
  myIG:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: Name
          Value: "IG-AWS-CLI"
  myCarrierRoute:
    Type: AWS::EC2::Route
    DependsOn: myIGVPCAss
    Properties:
      RouteTableId:
        Ref: myRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: myIG
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: "RouteTable-AWS-CLI"
      VpcId:
        Ref: myVPC
  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: "Private-RouteTable-AWS-CLI"
      VpcId:
        Ref: myVPC
  myRTSubnetAss1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId:
        Ref: myRouteTable
      SubnetId: 
        Ref: mySubnet1
  myRTSubnetAss2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: 
        Ref: myRouteTable
      SubnetId: 
        Ref: mySubnet2
  myRTSubnetAss3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: 
        Ref: myRouteTable
      SubnetId: 
        Ref: mySubnet3
  myPrivateRTSubnetAss1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId:
        Ref: myPrivateRouteTable
      SubnetId: 
        Ref: myPrivateSubnet1
  myPrivateRTSubnetAss2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: 
        Ref: myPrivateRouteTable
      SubnetId: 
        Ref: myPrivateSubnet2
  myPrivateRTSubnetAss3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: 
        Ref: myPrivateRouteTable
      SubnetId: 
        Ref: myPrivateSubnet3
  myIGVPCAss:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId:
        Ref: myIG
      VpcId:
        Ref: myVPC
  application:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Base Security Group
      SecurityGroupIngress:
         - IpProtocol: tcp
           CidrIp: 0.0.0.0/0
           FromPort: 22
           ToPort: 22
         - IpProtocol: tcp
           CidrIp: 0.0.0.0/0
           FromPort: 80
           ToPort: 80
         - IpProtocol: tcp
           CidrIp: 0.0.0.0/0
           FromPort: 443
           ToPort: 443
         - IpProtocol: tcp
           CidrIp: 0.0.0.0/0
           FromPort: 3000
           ToPort: 3000
      VpcId: !Ref myVPC
  DatabaseSecurityGroup:
    DependsOn:
     - myPrivateSubnet1
     - myPrivateSubnet2
     - myPrivateSubnet3
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database access details
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref application
      Tags:
      - Key: Name
        Value: database
      VpcId: !Ref myVPC
  S3bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "."
        - - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          - Ref: "ProfileName"
          - "dhandapani.ashwinbalaji"
      AccessControl: Private
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
        - Id: Rule for S3 bucket
          Prefix: S3 images
          Status: Enabled
          Transitions:
            - TransitionInDays: 30
              StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    DeletionPolicy: Delete
  RDSDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: mySQL Database for S3
      Family: mysql8.0
      Tags: 
        - Key: Name
          Value: mysqlRDSparameter
  RdsDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for mySQL database
      SubnetIds: 
        - Ref: myPrivateSubnet1
        - Ref: myPrivateSubnet2
        - Ref: myPrivateSubnet3
  MySqlDbInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: csye6225
      MasterUsername: !Ref DbUserName
      MasterUserPassword: !Ref DbPassword
      Engine: mysql
      EngineVersion : 8.0.28
      DBInstanceClass: db.t3.micro
      DBSubnetGroupName: !Ref RdsDBSubnetGroup
      StorageType: gp2
      PubliclyAccessible: False
      AllocatedStorage: "20"
      VPCSecurityGroups:
            - !GetAtt "DatabaseSecurityGroup.GroupId"
            - !Ref DatabaseSecurityGroup
      DBInstanceIdentifier: "csye6225"
      MultiAZ: False
  RootRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "EC2-CSYE6225"
      # Policies:

      #   - Ref: RolePolicies

      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  DemoInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: demo-ec2-instance-profile
      Path: /
      Roles:
       - !Ref RootRole
  RolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: S3CustomRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:Put*'
              - 's3:Get*'
              - 's3:Delete*'
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:PutObjectAcl
              - s3:ListMultipartUploadParts
              - s3:AbortMultipartUpload
              - ec2:RunInstances
              - ec2:AssociateIamInstanceProfile
              - ec2:ReplaceIamInstanceProfileAssociation
              - kms:Decrypt
              - kms:GenerateDataKey
              - s3:ListAllMyBuckets
            Resource:
              -  !Sub arn:aws:s3:::${S3bucket}
              -  !Sub arn:aws:s3:::${S3bucket}/*
      Roles:
        - Ref: RootRole
  Ec2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref AMI
      KeyName: !Ref KeyName
      InstanceType: "t2.micro"
      BlockDeviceMappings: 
      - DeviceName: "/dev/xvda"
        Ebs: 
          VolumeType: "gp2"
          DeleteOnTermination: "false"
          VolumeSize: "60"
      NetworkInterfaces:
      - AssociatePublicIpAddress: "true"
        DeleteOnTermination: "true"
        SubnetId: !Ref mySubnet1
        DeviceIndex: "0"
        GroupSet:
        - !Ref application
      IamInstanceProfile: !Ref DemoInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo 'export DB_HOSTNAME=${MySqlDbInstance.Endpoint.Address}' >> ~/export_instance_tags.sh
          echo 'export DB_USERNAME=${DbUserName}' >> ~/export_instance_tags.sh
          echo 'export DB_PASSWORD=${DbPassword}' >> ~/export_instance_tags.sh
          echo 'export DB_PORT=${DbPort}' >> ~/export_instance_tags.sh
          echo 'export DB_NAME=${DbName}' >> ~/export_instance_tags.sh
          echo 'export S3_BUCKET_NAME=${S3bucket}' >> ~/export_instance_tags.sh
          echo 'export S3_BUCKET_REGION=${S3BucketRegion}' >> ~/export_instance_tags.sh
          echo 'export AWS_ACCESS_KEY=${AwsAccessKey}' >> ~/export_instance_tags.sh
          echo 'export AWS_SECRET_KEY=${AwsSecretKey}' >> ~/export_instance_tags.sh
          chmod +x ~/export_instance_tags.sh
          sudo cp ~/export_instance_tags.sh /etc/profile.d/export_instance_tags.sh
          source /etc/profile
          cd /home/ec2-user/node-app/
          sudo systemctl restart node-service.service

